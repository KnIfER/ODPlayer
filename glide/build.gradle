apply plugin: 'com.android.library'



tasks.withType(JavaCompile) {
    options.fork = true
}

dependencies {
    api project(':gif_decoder')
    api project(':disklrucache')
    api project(':annotation')
    api (libs_fragment)
    api (libs_vectordrawable)

    if(use_compat_official=='1'){
        api (libs_compat)
    }else{
        implementation  project(':AxtAppCompat')
        implementation (libs_appres)
        configurations {
            //all*.exclude group: 'androidx.appcompat'
        }
    }


    //testImplementation "androidx.appcompat:appcompat:auto"
    //testImplementation "junit:junit:${JUNIT_VERSION}"
    //testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    //testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    //testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
    //testImplementation (libs_v4)
}

android {
    compileSdkVersion ver_compileSdkVersion as int

    defaultConfig {
        minSdkVersion ver_minsdk
        targetSdkVersion ver_aimsdk
        versionName "fff"
        consumerProguardFiles 'proguard-rules.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

//check.dependsOn(':library:findbugs:findbugs')
//check.dependsOn(':library:pmd:pmd')
//check.dependsOn(':library:test:check')

// Used in pmd and findbugs subprojects.
//@SuppressWarnings("GroovyUnusedDeclaration")
//def classPathForQuality() {
//    return files(
//            android.bootClasspath,
//            project.configurations.compile,
//            project.android.libraryVariants.collect { it.javaCompile.classpath }
//    )
//}

//apply from: "${rootProject.projectDir}/scripts/upload.gradle"
